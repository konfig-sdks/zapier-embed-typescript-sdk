/* tslint:disable */
/* eslint-disable */
/*
Zapier Embed API

The Zapier Embed API.

The version of the OpenAPI document: 1.0.0
Contact: contact@zapier.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActionsGetChoicesRequest } from '../models';
// @ts-ignore
import { ActionsGetChoicesRequestData } from '../models';
// @ts-ignore
import { ActionsGetChoicesResponse } from '../models';
// @ts-ignore
import { ActionsGetInputFieldsRequest } from '../models';
// @ts-ignore
import { ActionsGetInputFieldsResponse } from '../models';
// @ts-ignore
import { ActionsGetOutputFieldsRequest } from '../models';
// @ts-ignore
import { ActionsGetOutputFieldsResponse } from '../models';
// @ts-ignore
import { ActionsListAvailableActions404Response } from '../models';
// @ts-ignore
import { ActionsListAvailableActions406Response } from '../models';
// @ts-ignore
import { ActionsListAvailableActions415Response } from '../models';
// @ts-ignore
import { ActionsListAvailableActionsResponse } from '../models';
// @ts-ignore
import { ActionsListAvailableActionsdefaultResponse } from '../models';
// @ts-ignore
import { ActionsTestActionExecution200Response } from '../models';
// @ts-ignore
import { ActionsTestActionExecutionRequest } from '../models';
// @ts-ignore
import { ActionsTestActionExecutionResponse } from '../models';
// @ts-ignore
import { InputsWithAuthenticationId } from '../models';
// @ts-ignore
import { InputsWithAuthenticationIdAndFetchLiveSamples } from '../models';
// @ts-ignore
import { InputsWithAuthenticationIdNoPage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the possible values for an Input Field that is marked as `SELECT`.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Choices
         * @param {string} action An Action ID, as provided by the &#x60;/actions&#x60; endpoint.
         * @param {string} input An Input Field ID, as provided by the &#x60;/inputs&#x60; endpoint.
         * @param {string} [page] The page of choices to return, defaults to the first
         * @param {ActionsGetChoicesRequest} [actionsGetChoicesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChoices: async (action: string, input: string, page?: string, actionsGetChoicesRequest?: ActionsGetChoicesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('getChoices', 'action', action)
            // verify required parameter 'input' is not null or undefined
            assertParamExists('getChoices', 'input', input)
            const localVarPath = `/actions/{action}/inputs/{input}/choices`
                .replace(`{${"action"}}`, encodeURIComponent(String(action !== undefined ? action : `-action-`)))
                .replace(`{${"input"}}`, encodeURIComponent(String(input !== undefined ? input : `-input-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actionsGetChoicesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{action}/inputs/{input}/choices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actionsGetChoicesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Input Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Input Fields
         * @param {string} action An Action ID, as provided by the &#x60;/actions&#x60; endpoint.
         * @param {ActionsGetInputFieldsRequest} [actionsGetInputFieldsRequest] Common inputs with inputs and an authentication id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInputFields: async (action: string, actionsGetInputFieldsRequest?: ActionsGetInputFieldsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('getInputFields', 'action', action)
            const localVarPath = `/actions/{action}/inputs`
                .replace(`{${"action"}}`, encodeURIComponent(String(action !== undefined ? action : `-action-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actionsGetInputFieldsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{action}/inputs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actionsGetInputFieldsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Output Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
         * @summary Get Output Fields
         * @param {string} action An Action ID, as provided by the &#x60;/actions&#x60; endpoint.
         * @param {ActionsGetOutputFieldsRequest} [actionsGetOutputFieldsRequest] Common inputs with inputs, an authentication id and a parameter to optionally retrieve live samples for the field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutputFields: async (action: string, actionsGetOutputFieldsRequest?: ActionsGetOutputFieldsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('getOutputFields', 'action', action)
            const localVarPath = `/actions/{action}/outputs`
                .replace(`{${"action"}}`, encodeURIComponent(String(action !== undefined ? action : `-action-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actionsGetOutputFieldsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{action}/outputs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actionsGetOutputFieldsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the available actions for the provided App. It\'s typical to filter by type so that only actions that make sense for a particular step are shown. For example only showing reads for the first step in a Zap.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Actions
         * @param {string} app A canonical App ID, as provided by the &#x60;/apps&#x60; endpoint.
         * @param {'READ' | 'WRITE'} actionType The type of Action to filter for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableActions: async (app: string, actionType: 'READ' | 'WRITE', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('listAvailableActions', 'app', app)
            // verify required parameter 'actionType' is not null or undefined
            assertParamExists('listAvailableActions', 'actionType', actionType)
            const localVarPath = `/actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }

            if (actionType !== undefined) {
                localVarQueryParameter['action_type'] = actionType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tests the action (step) in the third party api, using the provided authentication and inputs. On a successful test returns 200 and the result of executing the action, otherwise it returns a 400 and details about the failure.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
         * @summary Test an action (step)
         * @param {string} action An Action ID, as provided by the &#x60;/actions&#x60; endpoint.
         * @param {ActionsTestActionExecutionRequest} [actionsTestActionExecutionRequest] Authentication id and inputs (such as &#x60;worksheet&#x60;, &#x60;spreadsheet&#x60; for google sheets, &#x60;text&#x60; and &#x60;channel&#x60; for slack) used to test the action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testActionExecution: async (action: string, actionsTestActionExecutionRequest?: ActionsTestActionExecutionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('testActionExecution', 'action', action)
            const localVarPath = `/actions/{action}/test`
                .replace(`{${"action"}}`, encodeURIComponent(String(action !== undefined ? action : `-action-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actionsTestActionExecutionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{action}/test',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actionsTestActionExecutionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the possible values for an Input Field that is marked as `SELECT`.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Choices
         * @param {ActionsApiGetChoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChoices(requestParameters: ActionsApiGetChoicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionsGetChoicesResponse>> {
            const actionsGetChoicesRequest: ActionsGetChoicesRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChoices(requestParameters.action, requestParameters.input, requestParameters.page, actionsGetChoicesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the Input Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Input Fields
         * @param {ActionsApiGetInputFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInputFields(requestParameters: ActionsApiGetInputFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionsGetInputFieldsResponse>> {
            const actionsGetInputFieldsRequest: ActionsGetInputFieldsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInputFields(requestParameters.action, actionsGetInputFieldsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the Output Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
         * @summary Get Output Fields
         * @param {ActionsApiGetOutputFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutputFields(requestParameters: ActionsApiGetOutputFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionsGetOutputFieldsResponse>> {
            const actionsGetOutputFieldsRequest: ActionsGetOutputFieldsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutputFields(requestParameters.action, actionsGetOutputFieldsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the available actions for the provided App. It\'s typical to filter by type so that only actions that make sense for a particular step are shown. For example only showing reads for the first step in a Zap.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Actions
         * @param {ActionsApiListAvailableActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableActions(requestParameters: ActionsApiListAvailableActionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionsListAvailableActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableActions(requestParameters.app, requestParameters.actionType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tests the action (step) in the third party api, using the provided authentication and inputs. On a successful test returns 200 and the result of executing the action, otherwise it returns a 400 and details about the failure.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
         * @summary Test an action (step)
         * @param {ActionsApiTestActionExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testActionExecution(requestParameters: ActionsApiTestActionExecutionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionsTestActionExecutionResponse>> {
            const actionsTestActionExecutionRequest: ActionsTestActionExecutionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.testActionExecution(requestParameters.action, actionsTestActionExecutionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActionsApiFp(configuration)
    return {
        /**
         * Get the possible values for an Input Field that is marked as `SELECT`.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Choices
         * @param {ActionsApiGetChoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChoices(requestParameters: ActionsApiGetChoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ActionsGetChoicesResponse> {
            return localVarFp.getChoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Input Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Input Fields
         * @param {ActionsApiGetInputFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInputFields(requestParameters: ActionsApiGetInputFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<ActionsGetInputFieldsResponse> {
            return localVarFp.getInputFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Output Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
         * @summary Get Output Fields
         * @param {ActionsApiGetOutputFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutputFields(requestParameters: ActionsApiGetOutputFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<ActionsGetOutputFieldsResponse> {
            return localVarFp.getOutputFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the available actions for the provided App. It\'s typical to filter by type so that only actions that make sense for a particular step are shown. For example only showing reads for the first step in a Zap.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Actions
         * @param {ActionsApiListAvailableActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableActions(requestParameters: ActionsApiListAvailableActionsRequest, options?: AxiosRequestConfig): AxiosPromise<ActionsListAvailableActionsResponse> {
            return localVarFp.listAvailableActions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Tests the action (step) in the third party api, using the provided authentication and inputs. On a successful test returns 200 and the result of executing the action, otherwise it returns a 400 and details about the failure.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
         * @summary Test an action (step)
         * @param {ActionsApiTestActionExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testActionExecution(requestParameters: ActionsApiTestActionExecutionRequest, options?: AxiosRequestConfig): AxiosPromise<ActionsTestActionExecutionResponse> {
            return localVarFp.testActionExecution(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getChoices operation in ActionsApi.
 * @export
 * @interface ActionsApiGetChoicesRequest
 */
export type ActionsApiGetChoicesRequest = {
    
    /**
    * An Action ID, as provided by the `/actions` endpoint.
    * @type {string}
    * @memberof ActionsApiGetChoices
    */
    readonly action: string
    
    /**
    * An Input Field ID, as provided by the `/inputs` endpoint.
    * @type {string}
    * @memberof ActionsApiGetChoices
    */
    readonly input: string
    
    /**
    * The page of choices to return, defaults to the first
    * @type {string}
    * @memberof ActionsApiGetChoices
    */
    readonly page?: string
    
} & ActionsGetChoicesRequest

/**
 * Request parameters for getInputFields operation in ActionsApi.
 * @export
 * @interface ActionsApiGetInputFieldsRequest
 */
export type ActionsApiGetInputFieldsRequest = {
    
    /**
    * An Action ID, as provided by the `/actions` endpoint.
    * @type {string}
    * @memberof ActionsApiGetInputFields
    */
    readonly action: string
    
} & ActionsGetInputFieldsRequest

/**
 * Request parameters for getOutputFields operation in ActionsApi.
 * @export
 * @interface ActionsApiGetOutputFieldsRequest
 */
export type ActionsApiGetOutputFieldsRequest = {
    
    /**
    * An Action ID, as provided by the `/actions` endpoint.
    * @type {string}
    * @memberof ActionsApiGetOutputFields
    */
    readonly action: string
    
} & ActionsGetOutputFieldsRequest

/**
 * Request parameters for listAvailableActions operation in ActionsApi.
 * @export
 * @interface ActionsApiListAvailableActionsRequest
 */
export type ActionsApiListAvailableActionsRequest = {
    
    /**
    * A canonical App ID, as provided by the `/apps` endpoint.
    * @type {string}
    * @memberof ActionsApiListAvailableActions
    */
    readonly app: string
    
    /**
    * The type of Action to filter for.
    * @type {'READ' | 'WRITE'}
    * @memberof ActionsApiListAvailableActions
    */
    readonly actionType: 'READ' | 'WRITE'
    
}

/**
 * Request parameters for testActionExecution operation in ActionsApi.
 * @export
 * @interface ActionsApiTestActionExecutionRequest
 */
export type ActionsApiTestActionExecutionRequest = {
    
    /**
    * An Action ID, as provided by the `/actions` endpoint.
    * @type {string}
    * @memberof ActionsApiTestActionExecution
    */
    readonly action: string
    
} & ActionsTestActionExecutionRequest

/**
 * ActionsApiGenerated - object-oriented interface
 * @export
 * @class ActionsApiGenerated
 * @extends {BaseAPI}
 */
export class ActionsApiGenerated extends BaseAPI {
    /**
     * Get the possible values for an Input Field that is marked as `SELECT`.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @summary Get Choices
     * @param {ActionsApiGetChoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiGenerated
     */
    public getChoices(requestParameters: ActionsApiGetChoicesRequest, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).getChoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Input Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @summary Get Input Fields
     * @param {ActionsApiGetInputFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiGenerated
     */
    public getInputFields(requestParameters: ActionsApiGetInputFieldsRequest, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).getInputFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Output Fields for a particular Action, using the provided authentication and inputs.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
     * @summary Get Output Fields
     * @param {ActionsApiGetOutputFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiGenerated
     */
    public getOutputFields(requestParameters: ActionsApiGetOutputFieldsRequest, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).getOutputFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the available actions for the provided App. It\'s typical to filter by type so that only actions that make sense for a particular step are shown. For example only showing reads for the first step in a Zap.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @summary Get Actions
     * @param {ActionsApiListAvailableActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiGenerated
     */
    public listAvailableActions(requestParameters: ActionsApiListAvailableActionsRequest, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).listAvailableActions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tests the action (step) in the third party api, using the provided authentication and inputs. On a successful test returns 200 and the result of executing the action, otherwise it returns a 400 and details about the failure.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min).
     * @summary Test an action (step)
     * @param {ActionsApiTestActionExecutionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiGenerated
     */
    public testActionExecution(requestParameters: ActionsApiTestActionExecutionRequest, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration).testActionExecution(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
