/* tslint:disable */
/* eslint-disable */
/*
Zapier Embed API

The Zapier Embed API.

The version of the OpenAPI document: 1.0.0
Contact: contact@zapier.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActionsListAvailableActionsdefaultResponse } from '../models';
// @ts-ignore
import { Zap } from '../models';
// @ts-ignore
import { ZapsCreateZapRequest } from '../models';
// @ts-ignore
import { ZapsCreateZapResponse } from '../models';
// @ts-ignore
import { ZapsGetFilteredZaps401Response } from '../models';
// @ts-ignore
import { ZapsGetFilteredZaps403Response } from '../models';
// @ts-ignore
import { ZapsGetFilteredZapsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ZapsApi - axios parameter creator
 * @export
 */
export const ZapsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This URL creates a new Zap based on a series of steps and a given title. `is_enabled` must be set to true when creating a new Zap.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Create a Zap
         * @param {string} [expand] A comma separated list of Zap fields that should be expanded from ids to full objects in the response. If a field may not be expanded, its encoded form will be returned instead.
         * @param {ZapsCreateZapRequest} [zapsCreateZapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createZap: async (expand?: string, zapsCreateZapRequest?: ZapsCreateZapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/zaps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: zapsCreateZapRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/zaps',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(zapsCreateZapRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of Zaps for the authenticated Zapier user.  The `expand` array can be used to expand selected fields into full objects in the response.  Inputs with keys can also be passed to filter Zaps by certain criteria.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Zaps
         * @param {number} [limit] Used for paginating results. Specifies the amount of apps to return
         * @param {number} [offset] Used for paginating results. Specifies the offset of the apps to return
         * @param {{ [key: string]: string; }} [inputs] You may pass inputs[KEY]&#x3D;VALUE1,VALUE2 to filter for Zaps that contain those settings. For example, if your OAuth app is Trello you may filter for Zaps that contain a certain Trello board using inputs[board]&#x3D;BOARD_ID â€” Keys are defined by your app on the developer platform.
         * @param {string} [expand] A comma separated list of Zap fields that should be expanded from ids to full objects in the response. If a field may not be expanded, its encoded form will be returned instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredZaps: async (limit?: number, offset?: number, inputs?: { [key: string]: string; }, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/zaps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (inputs !== undefined) {
                localVarQueryParameter['inputs'] = inputs;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/zaps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZapsApi - functional programming interface
 * @export
 */
export const ZapsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZapsApiAxiosParamCreator(configuration)
    return {
        /**
         * This URL creates a new Zap based on a series of steps and a given title. `is_enabled` must be set to true when creating a new Zap.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Create a Zap
         * @param {ZapsApiCreateZapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createZap(requestParameters: ZapsApiCreateZapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZapsCreateZapResponse>> {
            const zapsCreateZapRequest: ZapsCreateZapRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createZap(requestParameters.expand, zapsCreateZapRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of Zaps for the authenticated Zapier user.  The `expand` array can be used to expand selected fields into full objects in the response.  Inputs with keys can also be passed to filter Zaps by certain criteria.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Zaps
         * @param {ZapsApiGetFilteredZapsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredZaps(requestParameters: ZapsApiGetFilteredZapsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZapsGetFilteredZapsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilteredZaps(requestParameters.limit, requestParameters.offset, requestParameters.inputs, requestParameters.expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZapsApi - factory interface
 * @export
 */
export const ZapsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZapsApiFp(configuration)
    return {
        /**
         * This URL creates a new Zap based on a series of steps and a given title. `is_enabled` must be set to true when creating a new Zap.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Create a Zap
         * @param {ZapsApiCreateZapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createZap(requestParameters: ZapsApiCreateZapRequest, options?: AxiosRequestConfig): AxiosPromise<ZapsCreateZapResponse> {
            return localVarFp.createZap(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of Zaps for the authenticated Zapier user.  The `expand` array can be used to expand selected fields into full objects in the response.  Inputs with keys can also be passed to filter Zaps by certain criteria.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
         * @summary Get Zaps
         * @param {ZapsApiGetFilteredZapsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredZaps(requestParameters: ZapsApiGetFilteredZapsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ZapsGetFilteredZapsResponse> {
            return localVarFp.getFilteredZaps(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createZap operation in ZapsApi.
 * @export
 * @interface ZapsApiCreateZapRequest
 */
export type ZapsApiCreateZapRequest = {
    
    /**
    * A comma separated list of Zap fields that should be expanded from ids to full objects in the response. If a field may not be expanded, its encoded form will be returned instead.
    * @type {string}
    * @memberof ZapsApiCreateZap
    */
    readonly expand?: string
    
} & ZapsCreateZapRequest

/**
 * Request parameters for getFilteredZaps operation in ZapsApi.
 * @export
 * @interface ZapsApiGetFilteredZapsRequest
 */
export type ZapsApiGetFilteredZapsRequest = {
    
    /**
    * Used for paginating results. Specifies the amount of apps to return
    * @type {number}
    * @memberof ZapsApiGetFilteredZaps
    */
    readonly limit?: number
    
    /**
    * Used for paginating results. Specifies the offset of the apps to return
    * @type {number}
    * @memberof ZapsApiGetFilteredZaps
    */
    readonly offset?: number
    
    /**
    * You may pass inputs[KEY]=VALUE1,VALUE2 to filter for Zaps that contain those settings. For example, if your OAuth app is Trello you may filter for Zaps that contain a certain Trello board using inputs[board]=BOARD_ID â€” Keys are defined by your app on the developer platform.
    * @type {{ [key: string]: string; }}
    * @memberof ZapsApiGetFilteredZaps
    */
    readonly inputs?: { [key: string]: string; }
    
    /**
    * A comma separated list of Zap fields that should be expanded from ids to full objects in the response. If a field may not be expanded, its encoded form will be returned instead.
    * @type {string}
    * @memberof ZapsApiGetFilteredZaps
    */
    readonly expand?: string
    
}

/**
 * ZapsApiGenerated - object-oriented interface
 * @export
 * @class ZapsApiGenerated
 * @extends {BaseAPI}
 */
export class ZapsApiGenerated extends BaseAPI {
    /**
     * This URL creates a new Zap based on a series of steps and a given title. `is_enabled` must be set to true when creating a new Zap.  This endpoint requires the `zap:write` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @summary Create a Zap
     * @param {ZapsApiCreateZapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZapsApiGenerated
     */
    public createZap(requestParameters: ZapsApiCreateZapRequest, options?: AxiosRequestConfig) {
        return ZapsApiFp(this.configuration).createZap(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of Zaps for the authenticated Zapier user.  The `expand` array can be used to expand selected fields into full objects in the response.  Inputs with keys can also be passed to filter Zaps by certain criteria.  This endpoint requires the `zap` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.
     * @summary Get Zaps
     * @param {ZapsApiGetFilteredZapsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZapsApiGenerated
     */
    public getFilteredZaps(requestParameters: ZapsApiGetFilteredZapsRequest = {}, options?: AxiosRequestConfig) {
        return ZapsApiFp(this.configuration).getFilteredZaps(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
