/* tslint:disable */
/* eslint-disable */
/*
Zapier Embed API

The Zapier Embed API.

The version of the OpenAPI document: 1.0.0
Contact: contact@zapier.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExperimentalGetZapRuns401Response } from '../models';
// @ts-ignore
import { ExperimentalGetZapRuns403Response } from '../models';
// @ts-ignore
import { ExperimentalGetZapRunsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExperimentalApi - axios parameter creator
 * @export
 */
export const ExperimentalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is a first version tool that delivers basic yet essential details about their executed Zap runs. As an evolving interface, this first version serves foundational information about Zap runs.  _However, it\'s important to note that this is an initial implementation and the **response payload is not definitive**. Our aim is to continually iterate and enhance this API, refining its capabilities and data output, to progressively deliver more valuable and useful information in future versions._  This endpoint requires the `zap:runs` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.  Please note that since this is an experimental tool, if you\'re interested in gaining access, you must contact our support team.
         * @summary Get Zap Runs
         * @param {string} [fromDate] Find Zap runs equal to or newer than this date. If not provided, results default to last 30 days\&#39; Zap Runs.
         * @param {string} [toDate] Find Zap runs less than this date.
         * @param {string} [zapId] Find Zap runs for the specified Zap ID.
         * @param {number} [limit] Maximum number of returned Zap Runs.
         * @param {number} [offset] Number of Zap Runs to skip.
         * @param {string} [search] Performs a text search against the &#x60;zap_title&#x60;, &#x60;data_in&#x60;, and &#x60;data_out&#x60; fields, returning only zap runs that match the specified keywords.
         * @param {'delayed' | 'scheduled' | 'pending' | 'error' | 'error_handled' | 'halted' | 'throttled' | 'held' | 'filtered' | 'skipped' | 'success'} [statuses] Accepts one or more status values separated by commas, enabling the filtering of zap runs based on the specified status or statuses provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZapRuns: async (fromDate?: string, toDate?: string, zapId?: string, limit?: number, offset?: number, search?: string, statuses?: 'delayed' | 'scheduled' | 'pending' | 'error' | 'error_handled' | 'halted' | 'throttled' | 'held' | 'filtered' | 'skipped' | 'success', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/zap-runs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }

            if (zapId !== undefined) {
                localVarQueryParameter['zap_id'] = zapId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (statuses !== undefined) {
                localVarQueryParameter['statuses'] = statuses;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/zap-runs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentalApi - functional programming interface
 * @export
 */
export const ExperimentalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentalApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is a first version tool that delivers basic yet essential details about their executed Zap runs. As an evolving interface, this first version serves foundational information about Zap runs.  _However, it\'s important to note that this is an initial implementation and the **response payload is not definitive**. Our aim is to continually iterate and enhance this API, refining its capabilities and data output, to progressively deliver more valuable and useful information in future versions._  This endpoint requires the `zap:runs` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.  Please note that since this is an experimental tool, if you\'re interested in gaining access, you must contact our support team.
         * @summary Get Zap Runs
         * @param {ExperimentalApiGetZapRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZapRuns(requestParameters: ExperimentalApiGetZapRunsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentalGetZapRunsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZapRuns(requestParameters.fromDate, requestParameters.toDate, requestParameters.zapId, requestParameters.limit, requestParameters.offset, requestParameters.search, requestParameters.statuses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperimentalApi - factory interface
 * @export
 */
export const ExperimentalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentalApiFp(configuration)
    return {
        /**
         * This endpoint is a first version tool that delivers basic yet essential details about their executed Zap runs. As an evolving interface, this first version serves foundational information about Zap runs.  _However, it\'s important to note that this is an initial implementation and the **response payload is not definitive**. Our aim is to continually iterate and enhance this API, refining its capabilities and data output, to progressively deliver more valuable and useful information in future versions._  This endpoint requires the `zap:runs` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.  Please note that since this is an experimental tool, if you\'re interested in gaining access, you must contact our support team.
         * @summary Get Zap Runs
         * @param {ExperimentalApiGetZapRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZapRuns(requestParameters: ExperimentalApiGetZapRunsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ExperimentalGetZapRunsResponse> {
            return localVarFp.getZapRuns(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getZapRuns operation in ExperimentalApi.
 * @export
 * @interface ExperimentalApiGetZapRunsRequest
 */
export type ExperimentalApiGetZapRunsRequest = {
    
    /**
    * Find Zap runs equal to or newer than this date. If not provided, results default to last 30 days\' Zap Runs.
    * @type {string}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly fromDate?: string
    
    /**
    * Find Zap runs less than this date.
    * @type {string}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly toDate?: string
    
    /**
    * Find Zap runs for the specified Zap ID.
    * @type {string}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly zapId?: string
    
    /**
    * Maximum number of returned Zap Runs.
    * @type {number}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly limit?: number
    
    /**
    * Number of Zap Runs to skip.
    * @type {number}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly offset?: number
    
    /**
    * Performs a text search against the `zap_title`, `data_in`, and `data_out` fields, returning only zap runs that match the specified keywords.
    * @type {string}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly search?: string
    
    /**
    * Accepts one or more status values separated by commas, enabling the filtering of zap runs based on the specified status or statuses provided.
    * @type {'delayed' | 'scheduled' | 'pending' | 'error' | 'error_handled' | 'halted' | 'throttled' | 'held' | 'filtered' | 'skipped' | 'success'}
    * @memberof ExperimentalApiGetZapRuns
    */
    readonly statuses?: 'delayed' | 'scheduled' | 'pending' | 'error' | 'error_handled' | 'halted' | 'throttled' | 'held' | 'filtered' | 'skipped' | 'success'
    
}

/**
 * ExperimentalApiGenerated - object-oriented interface
 * @export
 * @class ExperimentalApiGenerated
 * @extends {BaseAPI}
 */
export class ExperimentalApiGenerated extends BaseAPI {
    /**
     * This endpoint is a first version tool that delivers basic yet essential details about their executed Zap runs. As an evolving interface, this first version serves foundational information about Zap runs.  _However, it\'s important to note that this is an initial implementation and the **response payload is not definitive**. Our aim is to continually iterate and enhance this API, refining its capabilities and data output, to progressively deliver more valuable and useful information in future versions._  This endpoint requires the `zap:runs` OAuth scope.  This API is rate limited by IP address (60 requests per min), or partner (150 requests per min), whichever occurs first.  Please note that since this is an experimental tool, if you\'re interested in gaining access, you must contact our support team.
     * @summary Get Zap Runs
     * @param {ExperimentalApiGetZapRunsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentalApiGenerated
     */
    public getZapRuns(requestParameters: ExperimentalApiGetZapRunsRequest = {}, options?: AxiosRequestConfig) {
        return ExperimentalApiFp(this.configuration).getZapRuns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
